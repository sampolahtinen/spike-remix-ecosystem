generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  name         String
  email        String        @unique
  interactions Interaction[]
  playlists    Playlist[]
}

model Interaction {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  songId    String?
  userId    String?
  isLiked   Boolean  @default(false)
  playCount Int
  track     Track?    @relation(fields: [songId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
}

model Track {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  name         String
  albumId      String?
  artistId     String
  length       Float
  track        Int?
  lyrics       String?
  fileUrl      String
  album        Album?        @relation(fields: [albumId], references: [id], onDelete: Cascade)
  artist       Artist        @relation(fields: [artistId], references: [id], onDelete: Cascade)
  interactions Interaction[]
  playlist     Playlist[]
}

model Artist {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  tracks    Track[]
  albums    Album[]
}

model Album {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  cover     String
  tracks    Track[]
  artists   Artist[]
}

model Playlist {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
  name      String
  user      User?    @relation(fields: [userId], references: [id])
  tracks    Track[]
}